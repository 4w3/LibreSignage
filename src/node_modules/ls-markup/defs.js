/*
*  LibreSignage markup syntax definitions.
*/

const ARGTYPES = {
	'percent': {
		code: 0,
		typestr: 'percent'
	},
	'int': {
		code: 1,
		typestr: 'int'
	},
	'str': {
		code: 2,
		typestr: 'str'
	},
	'rstr': {
		code: 3,
		typestr: 'rstr'
	}
};
module.exports.ARGTYPES = ARGTYPES;

module.exports.EXPRESSIONS = {
	root: { has: {}, handle: () => { return ['', '']; } },
	rstring: {
		has: {'text': ARGTYPES.rstr},
		handle: (arg) => { return [arg.text, '']; }
	},
	h: {
		has: { 'size': ARGTYPES.percent },
		handle: (arg) => {
			let s = arg.size.replace('%', 'vh');
			return [
				`<h1 style="font-size: ${s};">`,
				'</h1>'
			];
		}
	},
	lead: {
		has: {},
		handle: (arg) => {
			return [
				`<p class="lead">`,
				'</p>'
			]
		}
	},
	b: {
		has: {},
		handle: () => {
			return [
				'<span style="font-weight: bold;">',
				'</span>'
			];
		}
	},
	i: {
		has: {},
		handle: () => {
			return [
				'<span style="font-style: italic;">',
				'</span>'
			];
		}
	},
	img: {
		has: {
			'url': ARGTYPES.str,
			'width': ARGTYPES.percent,
			'height': ARGTYPES.percent
		},
		handle: (arg) => {
			let w = arg.width.replace('%', 'vh');
			let h = arg.height.replace('%', 'vw');
			return [
				`<img src=${arg.url} style="width: ${w}; height: ${h};">`,
				'</img>'
			];
		}
	},
	p: {
		has: {},
		handle: () => {
			return ['<p>',Â '</p>'];
		}
	},
	size: {
		has: { 'size': ARGTYPES.percent },
		handle: (arg) => {
			let s = arg.size.replace('%', 'vh');
			return [
				`<span style="font-size: ${s}">`,
				'</span>'
			];
		}
	},
	color: {
		has: { 'c': ARGTYPES.str },
		handle: (arg) => {
			return [
				`<span style="color: ${arg.c}">`,
				'</span>'
			];
		}
	},
	container: {
		has: {
			'top': ARGTYPES.percent,
			'right': ARGTYPES.percent,
			'bottom': ARGTYPES.percent,
			'left': ARGTYPES.percent
		},
		handle: (arg) => {
			let t = arg.top.replace('%', 'vh');
			let r = arg.right.replace('%', 'vh');
			let b = arg.bottom.replace('%', 'vh');
			let l = arg.left.replace('%', 'vh');
			return [
				`<div style="padding: ${t} ${r} ${b} ${l};">`,
				'</div>'
			];
		}
	},
	xcenter: {
		has: {},
		handle: () => {
			return [
				`<div style="margin-left: auto;
							margin-right: auto;
							text-align: center;
							width: auto;
							height: auto;">`,
				'</div>'
			];
		}
	},
	columns: {
		has: {},
		handle: () => {
			return [
				`<div style="display: flex;
						flex-direction: row;
						width: auto;
						height: auto;">`,
				'</div>'
			];
		}
	},
	align: {
		has: { 'type': ARGTYPES.rstr },
		accept: { 'type': ['left', 'right', 'center', 'justify']},
		handle: (arg) => {
			return [
				`<div style="text-align: ${arg.type};">`,
				'</div>'
			];
		}
	}
};
