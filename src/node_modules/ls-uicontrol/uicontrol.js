/*
*  LibreSignage UI controller functionality for simplifying tasks
*  such as input event handling.
*/

var $ = require('jquery');

exports.UIController = class UIController {
	/*
	*  This class stores information about all the defined UI
	*  elements and is used to manipulate them. The elements
	*  are passed as an array to the constructor function.
	*/
	constructor(elems) {
		this.elems = elems;
	}

	all(func, data, type) {
		/*
		*  Execute 'func' on all the UIElem instances of this
		*  UIController.
		*  - 'func' is the function to execute. Note that 'func'
		*    is added to the UIElem instance prior to executing
		*    it, meaning that 'this' in 'func' refers to the
		*    UIElem instance.
		*  - 'data' is passed as the first argument to 'func'.
		*  - 'type' can be used to filter the elements to execute
		*    the function on. 'type' should be a string corresponding
		*    to one of the type values of classes extending UIElem.
		*/
		var ret = true;
		for (let k of Object.keys(this.elems)) {
			if (type == null || this.elems[k].type == type) {
				this.elems[k]._tmp = func;
				ret = this.elems[k]._tmp(data);
				this.elems[k]._tmp = null;
				if (ret == false) { break; }
			}
		}
	}

	add(name, elem) { this.elems[name] = elem; }
	rm(name) { delete this.elems[name]; }
	rm_all() { this.elems = {}; }
	get(name) { return this.elems[name]; }
}

exports.UIElem = class UIElem {
	/*
	*  Main UI element interface class.
	*
	*  Constructor arguments:
	*    - _elem    = The element to attach to.
	*    - _perm    = The permission checking function. This should
	*                 return true if the input should be enabled and
	*                 false otherwise. This is used by UIElem.state().
	*    - _enabler = The enabler function. This function is called with
	*                 true as the first argument when enabling the
	*                 element and with false when disabling it.
	*    - _attach  = A dictionary of event listeners. The keys are
	*                 the event names and the values are the callbacks.
	*    - _defer   = If this function returns true when an event is
	*                 is being handled, the event is deferred. Otherwise
	*                 the callback function is executed.
	*/
	constructor(_elem, _perm, _enabler, _attach, _defer) {
		this.type = null;
		this._elem = _elem;
		this._perm = _perm;
		this._attach = _attach;
		this._defer = _defer;

		if (_enabler) {
			this._enabler = _enabler;
		} else {
			// Use default enabler function.
			this._enabler = function(elem, state) {
				elem.prop('disabled', !state);
			}
		}

		// Attach event listeners to '_elem'.
		for (let key in this._attach) {
			this._elem.on(key, (event) => {
				if (this._defer && this._defer()) {
					console.log(`UIButton: '${key}' deferred.`);
				} else {
					this._attach[key](event);
				}
			});
		}
	}

	get_elem() {
		// Get the element this UIElem is attached to.
		if (typeof this._elem == 'function') {
			return this._elem();
		} else {
			return this._elem;
		}
	}

	enabled(state) {
		// Manually set the enabled/disabled state.
		this._enabler(this.get_elem(), state);
	}

	state(perm_data) {
		/*
		*  Set the enabled/disabled state based on the
		*  return value of 'this._perm()'.
		*/
		if (this._perm) {
			this._enabler(this.get_elem(), this._perm(perm_data));
		}
	}
}

exports.UIInput = class UIInput extends exports.UIElem {
	/*
	*  UIElem class for DOM inputs.
	*/
	constructor(
		_elem, _perm, _enabler,
		_attach, _defer, _mod,
		_getter, _setter, _clear
	) {
		super(_elem, _perm, _enabler, _attach, _defer);
		this.type = "input";

		this._mod = _mod;       // Modification checking callback.
		this._getter = _getter; // Value getter.
		this._setter = _setter; // Value setter.
		this._clear = _clear;   // Input clearing function.
	}

	get() {
		// Get the value of the input.
		if (this._getter) {
			return this._getter(this.get_elem());
		} else {
			return null;
		}
	}

	set(data) {
		// Set the value of the input.
		if (this._setter) {
			this._setter(this.get_elem(), data);
		}
	}

	is_mod(data) {
		// Check whether the input is modified.
		if (this._mod) {
			return this._mod(this.get_elem(), data);
		} else {
			return false;
		}
	}

	clear() {
		// Clear the input.
		if (this._clear) {
			this._clear(this.get_elem());
		}
	}
}

exports.UIButton = class UIButton extends exports.UIElem {
	/*
	*  UIElem class for DOM buttons.
	*/
	constructor(_elem, _perm, _enabler, _attach, _defer) {
		super(_elem, _perm, _enabler, _attach, _defer);
		this.type = "button";
	}
}
