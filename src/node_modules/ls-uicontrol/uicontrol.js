var $ = require('jquery');

exports.UIController = class UIController {
	constructor(elems) {
		this.elems = elems;
	}

	all(func, data, type) {
		var ret = true;
		for (let k of Object.keys(this.elems)) {
			if (type == null || this.elems[k].type == type) {
				this.elems[k]._tmp = func;
				ret = this.elems[k]._tmp(data);
				this.elems[k]._tmp = null;
				if (ret == false) { break; }
			}
		}
	}

	add(name, elem) { this.elems[name] = elem; }
	rm(name) { delete this.elems[name]; }
	rm_all() { this.elems = {}; }
	get(name) { return this.elems[name]; }
}

exports.UIElem = class UIElem {
	constructor(_elem, _perm, _enabler) {
		this.type = null;
		this._elem = _elem;
		this._perm = _perm;

		if (_enabler) {
			this._enabler = _enabler;
		} else {
			// Use default enabler function.
			this._enabler = function(elem, state) {
				elem.prop('disabled', !state);
			}
		}
	}

	get_elem() {
		if (typeof this._elem == 'function') {
			return this._elem();
		} else {
			return this._elem;
		}
	}

	enabled(state) {
		this._enabler(this.get_elem(), state);
	}

	state(perm_data) {
		if (this._perm) {
			this._enabler(this.get_elem(), this._perm(perm_data));
		}
	}
}

exports.UIInput = class UIInput extends exports.UIElem {
	constructor(_elem, _perm, _enabler, _mod, _getter, _setter, _clear) {
		super(_elem, _perm, _enabler);

		this.type = "input";
		this._mod = _mod;
		this._getter = _getter;
		this._setter = _setter;
		this._clear = _clear;
	}

	get() {
		if (this._getter) {
			return this._getter(this.get_elem());
		} else {
			return null;
		}
	}

	set(data) {
		if (this._setter) {
			this._setter(this.get_elem(), data);
		}
	}

	is_mod(data) {
		if (this._mod) {
			return this._mod(this.get_elem(), data);
		} else {
			return false;
		}
	}

	clear() {
		if (this._clear) {
			this._clear(this.get_elem());
		}
	}
}

exports.UIButton = class UIButton extends exports.UIElem {
	constructor(_elem, _perm, _enabler, _attach) {
		super(_elem, _perm, _enabler);

		this.type = "button";
		this._attach = _attach;
		for (let key in this._attach) {
			this._elem.on(key, this._attach[key]);
		}
	}
}
