/*
*  Abstract Syntax Tree object implementation for LibreSignage.
*/

var util = require('util');

module.exports.ECODES = {
	ERN: { code: 0 },
	EUN: { code: 1 }
}

module.exports.ASTError = class ASTError extends Error {
	constructor(code, data, message, file, line) {
		super(message, file, line);
		if (Error.captureStackTrace) {
			Error.captureStackTrace(this, ASTError);
		}
		this.code = module.exports.ECODES[code];
		this.data = data;
	}
}

module.exports.AbstractSyntaxTree = class AbstractSyntaxTree {
	constructor() {
		this.nodes = {
			'name': 'root',
			'nodes': [],
			'data': null,
			'parent': null,
			'lexeme': null
		};
		this.cnode = this.nodes;
	}

	open_node(name, lexeme) {
		let tmp = {
			'name': name,
			'nodes': [],
			'data': null,
			'parent': this.cnode,
			'lexeme': lexeme
		};
		this.cnode.nodes.push(tmp);
		this.cnode = tmp;
	}

	close_node(name) {
		if (!this.cnode.parent) {
			throw new module.exports.ASTError(
				'ERN',
				{'got': name}
			);
		}
		if (this.cnode.name != name) {
			throw new module.exports.ASTError(
				'EUN',
				{
					'got': name,
					'expected': this.cnode.name
				}
			);
		}
		this.cnode = this.cnode.parent;
	}

	set_data(data) {
		this.cnode.data = data;
	}

	dump() {
		console.log(util.inspect(this.nodes, {'depth': null}));
	}
}
