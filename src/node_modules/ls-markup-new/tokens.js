/*
*  Token definitions for the LibreSignage markup parser.
*/

var lexeme = require('./lexeme.js');
var mutil = require('./mutil.js');

class TokenMatcher {
	constructor(type, regex, repr, matcher) {
		this.type = type;
		this.regex = regex;
		this.repr = repr;
		if (!matcher) {
			this.matcher = this.def_matcher;
		} else {
			this.matcher = matcher;
		}
	}

	def_matcher(str, ln, at) {
		let m = str.substring(at).match(this.regex);
		if (m) {
			return new lexeme.Lexeme(
				this.type, m[0], ln, at
			);
		} else {
			return null;
		}
	}
}

module.exports.TOKENS = [
	new TokenMatcher('BRACK_OPEN', /^\[/, '['),
	new TokenMatcher('BRACK_CLOSE', /^\]/, ']'),
	new TokenMatcher(
		'BRACK_SLASH', /^\//, '/',
		function (str, ln, at, index, lexemes) {
			let tmp = {};
			tmp[index - 1] = new lexeme.Lexeme('BRACK_OPEN');
			if (!mutil.chk_lexeme_context(lexemes, tmp)) {
				return null;
			} else {
				return this.def_matcher(str, ln, at);
			}
		}
	),
	new TokenMatcher('WHITESPACE', /^\s+/, '(whitespace)'),
	new TokenMatcher(
		'ASSIGN', /^=/, '=',
		function(str, ln, at, index, lexemes) {
			let tmp = {};
			let ret = null;
			tmp[index - 1] = new lexeme.Lexeme('LITERAL');
			if (!mutil.chk_lexeme_context(lexemes, tmp)) {
				return null;
			} else {
				let ret = this.def_matcher(str, ln, at);
				if (ret) {
					// Convert the LITERAL into VARNAME.
					lexemes[index - 1] = new lexeme.Lexeme(
						'VARNAME',
						lexemes[index - 1].raw,
						lexemes[index - 1].ln_num,
						lexemes[index - 1].ln_pos
					);
				}
				return ret;
			}
		}
	),
	new TokenMatcher(
		'TAGNAME', /^[A-Za-z0-9_-]+/, '(tagname)',
		function(str, ln, at, index, lexemes) {
			let tmp_1 = {};
			let tmp_2 = {};

			tmp_1[index - 1] = new lexeme.Lexeme(
				'BRACK_OPEN'
			);

			tmp_2[index - 2] = new lexeme.Lexeme(
				'BRACK_OPEN'
			);
			tmp_2[index - 1] = new lexeme.Lexeme(
				'BRACK_SLASH'
			);

			if (
				!mutil.chk_lexeme_context(lexemes, tmp_1)
				&& !mutil.chk_lexeme_context(lexemes, tmp_2)
			) {
				return null;
			} else {
				return this.def_matcher(str, ln, at);
			}
		}
	),
	new TokenMatcher(
		'VARNAME', null, '(variable name)',
		function() { return null; }
	),
	new TokenMatcher('LITERAL', /^[^=\[\]\s]+/, '(literal)')
];

module.exports.get_tok = function(type) {
	for (let tm of module.exports.TOKENS) {
		if (tm.type == type) {
			return tm;
		}
	}
	return null;
}
