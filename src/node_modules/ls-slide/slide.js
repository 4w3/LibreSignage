/*
*  LibreSignage JS Slide object definition with functions
*  for loading data through the LibreSignage API.
*/

exports.Slide = class Slide {
	constructor(api) {
		if (!api) {
			throw new Error(
				"Can't create a Slide without " +
				"a valid API object."
			);
		}

		// Map animation identifiers to CSS classes.
		this.ANIM_MAP = {
			0: {
				hide: null,
				show: null,
			},
			1: {
				hide: 'swipe-left',
				show: 'swipe-from-right'
			},
			2: {
				hide: 'swipe-right',
				show: 'swipe-from-left'
			},
			3: {
				hide: 'swipe-up',
				show: 'swipe-from-below'
			},
			4: {
				hide: 'swipe-down',
				show: 'swipe-from-above'
			}
		};
		this.data = {};
		this.api = api;
	}

	load(id, callback) {
		/*
		*  Load the slide with ID 'id' using the LibreSignage
		*  API. The function 'callback' is called after the
		*  API call has completed. The received API error code
		*  is passed to the callback function as the first
		*  argument.
		*/
		this.api.call(this.api.ENDP.SLIDE_GET, { 'id': id }, (resp) => {
			if (this.api.handle_disp_error(resp['error'])) {
				if (callback) {
					callback(resp['error']);
				}
				return;
			}
			this.set(resp['slide']);
			if (callback) {
				callback(resp['error']);
			}
		});
	}

	save(callback) {
		/*
		*  Save this slide using the LibreSignage API. The
		*  function 'callback' is called after the API call
		*  has completed. The received API error code is
		*  passed to the callback function as the first
		*  argument.
		*/
		this.api.call(this.api.ENDP.SLIDE_SAVE, this.data, (resp) => {
			if (resp.error) {
				console.error("LibreSignage: API error!");
				if (callback) { callback(resp.error); }
				return;
			}
			this.set(resp);
			if (callback) { callback(resp.error); }
		});
	}

	remove(id, callback) {
		/*
		*  If 'id' is defined, remove the slide with the
		*  ID 'id' using the LibreSignage API. Otherwise
		*  remove the currently loaded slide. The function
		*  'callback' is called after the API call has
		*  completed. An API error code is passed to the
		*  callback function as the first argument.
		*/

		var r_id = "";
		if (id) {
			r_id = id;
		} else if (this.data.id) {
			r_id = this.data.id;
		} else {
			throw new Error("No slide ID specified for removal.");
		}

		this.api.call(this.api.ENDP.SLIDE_RM, { 'id': r_id }, (resp) => {
			if (resp.error) {
				console.error("LibreSignage: API error.");
				if (callback) { callback(resp.error); }
				return;
			}
			if (callback) { callback(resp.error); }
		});
	}

	dup(callback) {
		this.api.call(
			this.api.ENDP.SLIDE_DUP,
			{'id': this.get('id')},
			(resp) => {
				var s = null;
				if (this.api.handle_disp_error(resp['error'])) {
					return;
				}
				if (callback) {
					s = new Slide(this.api);
					s.set(resp['slide']);
					callback(s);
				}
			}
		);
	}

	set(data) {
		/*
		*  Copy 'data' to this slide's data array. Existing
		*  data is overwritten.
		*/
		Object.assign(this.data, data);
	}

	clear() { this.data = {}; }
	get(key) { return this.data[key]; }

	anim_hide() { return this.ANIM_MAP[this.get('animation')].hide; }
	anim_show() { return this.ANIM_MAP[this.get('animation')].show; }
}
