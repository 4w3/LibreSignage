/*
*  LibreSignage API interface implementation. The interface is
*  implemented as a module so that it can be included using
*  require('libresignage-api'). The functions defined in this
*  module should be used to interface with the LibreSignage API.
*/

var $ = require('jquery');
var util = require('ls-util');
var cookie = require('ls-cookie');
var dialog = require('ls-dialog');

exports.API = class API {
	constructor(config, callback) {
		this.SESSION_RENEWAL_HEADROOM = 30;

		this.CONFIG = {
			protocol: null,
			hostname: null,
			configured: false,
			authenticated: false,
			user: '',
			noui: false
		};

		this.SERVER_LIMITS = null;
		this.ERR_MSGS = null;
		this.ERR = null;

		this.ENDP = {
			// -- User management API endpoints --
			USER_GET_QUOTA: {
				uri:	"/api/endpoint/user/user_get_quota.php",
				method: "GET",
				auth:	true
			},
			USER_CREATE: {
				uri:	"/api/endpoint/user/user_create.php",
				method: "POST",
				auth:	true
			},
			USER_REMOVE: {
				uri:	"/api/endpoint/user/user_remove.php",
				method: "POST",
				auth:	true
			},
			USER_SAVE: {
				uri:	"/api/endpoint/user/user_save.php",
				method: "POST",
				auth:	true
			},
			USER_GET: {
				uri:	"/api/endpoint/user/user_get.php",
				method: "GET",
				auth:	true
			},
			USER_GET_CURRENT: {
				uri:	"/api/endpoint/user/user_get_current.php",
				method: "GET",
				auth:	true
			},
			USERS_GET_ALL: {
				uri:	"/api/endpoint/user/users_get_all.php",
				method:	"GET",
				auth:	true
			},
			USERS_LIST: {
				uri:	"/api/endpoint/user/users_list.php",
				method:	"GET",
				auth:	true
			},

			// -- Slide API endpoints --
			SLIDE_LIST: {
				uri:	"/api/endpoint/slide/slide_list.php",
				method:	"GET",
				auth:	true
			},
			SLIDE_DATA_QUERY: {
				uri:	"/api/endpoint/slide/slide_data_query.php",
				method:	"GET",
				auth:	true
			},
			SLIDE_GET: {
				uri:	"/api/endpoint/slide/slide_get.php",
				method: "GET",
				auth:	true,
			},
			SLIDE_SAVE: {
				uri:	"/api/endpoint/slide/slide_save.php",
				method: "POST",
				auth:	true
			},
			SLIDE_DUP: {
				uri:	"/api/endpoint/slide/slide_dup.php",
				method: "POST",
				auth:	true
			},
			SLIDE_RM: {
				uri:	"/api/endpoint/slide/slide_rm.php",
				method: "POST",
				auth:	true
			},

			// -- Queue API endpoints --
			QUEUE_GET: {
				uri:	"/api/endpoint/queue/queue_get.php",
				method: "GET",
				auth:	true
			},
			QUEUE_CREATE: {
				uri:	"/api/endpoint/queue/queue_create.php",
				method:	"POST",
				auth:	true
			},
			QUEUE_LIST: {
				uri:	"/api/endpoint/queue/queue_list.php",
				method:	"GET",
				auth:	true
			},
			QUEUE_REMOVE: {
				uri:	"/api/endpoint/queue/queue_remove.php",
				method:	"POST",
				auth:	true
			},

			// -- Authentication API endpoints --
			AUTH_LOGIN: {
				uri:	"/api/endpoint/auth/auth_login.php",
				method: "POST",
				auth:	false
			},
			AUTH_LOGOUT: {
				uri:	"/api/endpoint/auth/auth_logout.php",
				method: "POST",
				auth:	true
			},
			AUTH_LOGOUT_OTHER: {
				uri:	"/api/endpoint/auth/auth_logout_other.php",
				method: "POST",
				auth:	true
			},
			AUTH_SESSION_RENEW: {
				uri:	"/api/endpoint/auth/auth_session_renew.php",
				method: "POST",
				auth:	true
			},
			AUTH_GET_SESSIONS: {
				uri:	"/api/endpoint/auth/auth_get_sessions.php",
				method: "GET",
				auth:	true
			},

			// -- General information API endpoints --
			API_ERR_CODES: {
				uri:	"/api/endpoint/general/api_err_codes.php",
				method:	"GET",
				auth:	false
			},
			API_ERR_MSGS: {
				uri:	"/api/endpoint/general/api_err_msgs.php",
				method:	"GET",
				auth:	false
			},
			SERVER_LIMITS: {
				uri:	"/api/endpoint/general/server_limits.php",
				method: "GET",
				auth:	false
			},
			LIBRARY_LICENSES: {
				uri:	"/api/endpoint/general/library_licenses.php",
				method:	"GET",
				auth:	false
			},
			LIBRESIGNAGE_LICENSE: {
				uri:	"/api/endpoint/general/libresignage_license.php",
				method:	"GET",
				auth:	false
			},
			VER_INFO: {
				uri:	"/api/endpoint/general/ver_info.php",
				method:	"GET",
				auth:	false
			}
		};

		/*
		*  Initialize the API interface.
		*/
		if (this.CONFIG.configured) { return; }
		this.apply_config(config);
		this.CONFIG.configured = true;

		this.load_capabilities(() => {
			this.session_check(() => {
				console.log("API: Initialized.");
				console.log(`API: LS version: ${this.CONFIG.LS_VER}`);
				console.log(`API: API version: ${this.CONFIG.API_VER}`);
				if (callback) { callback(); }
			});
		});
	}

	_ensure_configured() {
		if (!this.configured) {
			throw new Error("API: Not initialized");
		}
	}

	_ensure_authenticated() {
		if (!this.authenticated) {
			throw new Error("API: Not authenticated.");
		}
	}

	configured() {
		return this.CONFIG.configured;
	}

	authenticated() {
		return this.CONFIG.authenticated;
	}

	call(endpoint, data, callback) {
		/*
		*  Call an API enpoint. The argument 'endpoint' should
		*  be one of the enpoints defined in this.ENDP. 'data'
		*  can be an object containing the data to send with the
		*  API request. The 'callback' argument can be a function
		*  that is called after the API call is complete. The
		*  parsed API response is passed to the callback as the
		*  first argument. Both 'data' and 'callback' can be
		*  left null if they are not needed.
		*/

		this._ensure_configured();
		if (endpoint.auth) { this._ensure_authenticated(); }

		var data_str = "";
		var ajax_settings = {
			url: `${this.host()}/${endpoint.uri}`,
			method: endpoint.method,
			dataType: 'json',
			error: function(jqhxr, status, exception) {
				console.error(
					`API: XHR failed. ` +
					`(status: ${status})`
				);
				callback({'error': this.ERR.API_E_INTERNAL});
			},
			success: function(data, status, jqxhr) {
				if (callback) {
					callback(data);
				}
			}
		};

		switch (endpoint.method) {
			case "POST":
				ajax_settings.data = JSON.stringify(data);
				ajax_settings.contentType =
					'application/json';
				break;
			case "GET":
				// Let jQuery encode the data.
				ajax_settings.data = data;
				ajax_settings.contentType =
					'application/x-www-form-urlencoded';
				break;
			default:
				throw new Error(
					`Invalid endpoint method
					'${endpoint.method}'.`
				);
		}

		if (endpoint.auth) {
			ajax_settings.headers = {
				'Auth-Token': cookie.get_cookie('session_token')
			};
		}
		$.ajax(ajax_settings);
	}

	handle_disp_error(err, callback) {
		this._ensure_configured();

		var h = "";
		var p = "";

		if (err == 0) { return 0; }

		if (!this.ERR_MSGS) {
			h = "Error";
			p = "An error was encountered, but a more detailed " +
				"error description can't be shown because the " +
				"error messages haven't been loaded.";
		} else if (err in Object.keys(this.ERR_MSGS)) {
			h = this.ERR_MSGS[err].short;
			p = this.ERR_MSGS[err].long;
		} else {
			h = "Unknown error";
			p = `The server encountered an unknown error. (${err})`;
		}
		if (!this.CONFIG.noui) {
			dialog.dialog(dialog.TYPE.ALERT, h, p, callback);
		}
		console.error("API: " + p);
		return err;
	}

	load_capabilities(ready) {
		/*
		*  Load the API error codes, messages and the server limits.
		*  'ready' is called after the function is finished.
		*/
		var codes = new Promise((resolve,reject) => {
			this.call(this.ENDP.API_ERR_CODES, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load API error codes."
					));
				}
				this.ERR = resp.codes;
				resolve();
			});
		})
		var msgs = new Promise((resolve, reject) => {
			this.call(this.ENDP.API_ERR_MSGS, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load API error messages"
					));
				}
				this.ERR_MSGS = resp.messages;
				resolve();
			});
		});
		var limits = new Promise((resolve, reject) => {
			this.call(this.ENDP.SERVER_LIMITS, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load server limits"
					));
				}
				this.SERVER_LIMITS = resp.limits;
				resolve();
			});
		});
		var ver = new Promise((resolve, reject) => {
			this.call(this.ENDP.VER_INFO, null, (resp) => {
				if (this.handle_disp_error(resp.error)) {
					reject(new Error(
						"Failed to load version information."
					));
				}
				this.CONFIG.LS_VER = resp.ls;
				this.CONFIG.API_VER = resp.api;
				resolve();
			})
		});

		Promise.all([codes, msgs, limits, ver])
			.then(ready)
			.catch((error) => { throw error; });
	}

	host() {
		/*
		*  Get the API host URL.
		*/
		this._ensure_configured();
		return this.CONFIG.protocol + "\/\/" + this.CONFIG.hostname;
	}

	apply_config(config) {
		/*
		*  Apply the API config from 'config'.
		*/
		var tmp = config;
		console.log("API: Configuring API interface.")
		if (tmp == null) {
			tmp = {};
		} else if (tmp !== Object(tmp)) {
			throw new Error(
				"Invalid type for 'config'. " +
				"Expected object or null."
			);
		}

		if (tmp.protocol) {
			console.log(`API: Protocol: ${tmp.protocol}`);
			this.CONFIG.protocol = tmp.protocol;
		} else {
			console.log("API: Using default protocol.")
			this.CONFIG.protocol = window.location.protocol;
		}

		if (tmp.hostname) {
			console.log(`API: Hostname: ${tmp.hostname}`);
			this.CONFIG.hostname = tmp.hostname;
		} else {
			console.log("API: Using default hostname.");
			this.CONFIG.hostname = window.location.hostname;
		}

		if ('noui' in tmp) {
			this.CONFIG.noui = tmp.noui;
		}
		console.log(`API: UI enabled: ${!this.CONFIG.noui}`);
	}

	session_schedule_renewal() {
		/*
		*  Schedule a session renewal just before the
		*  existing session expires.
		*/
		this._ensure_authenticated();

		if (cookie.get_cookie('session_permanent') == '1') {
			console.log(
				"API: Won't schedule session renewal " +
				"for a permanent session."
			);
			return;
		}

		var created = parseInt(cookie.get_cookie('session_created'), 10);
		var max_age = parseInt(cookie.get_cookie('session_max_age'), 10);

		if (max_age <= this.SESSION_RENEWAL_HEADROOM) {
			throw new Error(
				"Session max_age too low. " +
				"(max_age <= this.SESSION_RENEWAL_HEADROOM)"
			);
		} else if (max_age <= this.SESSION_RENEWAL_HEADROOM + 10) {
			throw new Error(
				"Session max_age is so low that the " +
				"session would be renewed very often " +
				"causing a high load on the client and " +
				"server. Session renewal won't be scheduled."
			);
		}

		var left = created + max_age - Date.now()/1000;
		var t = left - this.SESSION_RENEWAL_HEADROOM;

		if (left <= 0) {
			this.session_remove();
			console.error(
				"API: Won't schedule session renewal because " +
				"the session is already expired."
			);
			return;
		} else if (t <= 0) {
			// Attempt to renew the session now.
			this.session_renew();
			return;
		}
		console.log("API: Session renewal in " + t + " seconds.");
		setTimeout(this.session_renew, t*1000);
	}

	session_renew() {
		/*
		*  Renew the stored session.
		*/
		console.log("API: Renew session.");
		this.call(
			this.ENDP.AUTH_SESSION_RENEW,
			null,
			(resp) => {
				if (this.handle_disp_error(resp.error)) {
					console.error("API: Session renewal " +
							"failed.");
					this.session_remove();
					return;
				}
				console.log("API: Session renewal complete.");
				this.session_schedule_renewal();
			}
		)
	}

	session_remove() {
		/*
		*  Remove the session data cookies.
		*/
		this.CONFIG.authenticated = false;
		cookie.rm_cookie({"session_token": "", "path": "/"});
		cookie.rm_cookie({"session_created": "", "path": "/"});
		cookie.rm_cookie({"session_max_age": "", "path": "/"});
		cookie.rm_cookie({"session_permanent": "", "path": "/"});
	}

	session_check(ready) {
		/*
		*  Check the authentication status of the API. This
		*  function also schedules a session renewal.
		*/
		console.log("API: Check authentication status.");
		if (
			cookie.cookie_exists('session_token')
			&& cookie.cookie_exists('session_created')
			&& cookie.cookie_exists('session_max_age')
		) {
			/*
			*  Get the current username and check that
			*  the session actually is valid.
			*/
			this.call(this.ENDP.USER_GET_CURRENT, {}, (data) => {
				var e = data['error'];
				if (e == this.ERR.API_E_OK) {
					this.CONFIG.authenticated = true;
					this.CONFIG.user = data['user']['user'];
					this.session_schedule_renewal();
				} else if (e == this.ERR.API_E_NOT_AUTHORIZED) {
					console.log('API: Session not valid.');
					this.session_remove();
				} else {
					this.handle_disp_error(e);
					return;
				}
				if (ready) { ready(); }
			});
		} else {
			// Remove invalid cookies.
			console.log("API: No valid session data.");
			this.session_remove();
			if (ready) { ready(); }
		}
	}

	login(user, pass, perm, ready_callback) {
		/*
		*  Login using the supplied credentials and store the
		*  returned session data. ready_callback is called when
		*  the login is successfully finished.
		*/
		console.log("API: Authenticate");
		this.call(
			this.ENDP.AUTH_LOGIN,
			{
				username: user,
				password: pass,
				permanent: perm,
				who: "LibreSignage-Web-Interface"
			},
			(resp) => {
				if (resp.error == this.ERR.API_E_OK) {
					this.CONFIG.authenticated = true;
					this.CONFIG.user = user;
					this.session_schedule_renewal();
				} else {
					console.error("API: Auth failed.");
					this.session_remove();
				}

				if (ready_callback) {
					ready_callback(resp);
				}
			}
		);
	}

	logout(ready_callback) {
		/*
		*  Call the logout API endpoint and remove session
		*  data cookies. ready_callback is called when the
		*  logout is successfully finished.
		*/
		this.call(
			this.ENDP.AUTH_LOGOUT,
			null,
			(resp) => {
				if (resp.error == this.ERR.API_E_OK) {
					// Remove session data cookies.
					this.session_remove();
				} else {
					console.error("API: Logout failed.");
				}
				if (ready_callback) {
					ready_callback(resp);
				}
			}
		);
	}
}
